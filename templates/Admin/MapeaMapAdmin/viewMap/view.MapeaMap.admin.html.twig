<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8">
        <meta content='width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no' name='viewport'>
        <title>{% block title %}{{mapeaMap.name}}{% endblock %}</title>
        {% block stylesheets %}
<!-- Style Core Mapea -->
        <link href="{{mapeaMap.mapeaCore.style|raw}}" rel="stylesheet" /> 
        {% if  mapeaMap.mapeaPlugins is not null and  mapeaMap.mapeaPlugins is not empty %}
<!-- Style Plugins Mapea -->  
            {% for mapeaPlugin in mapeaMap.mapeaPlugins %}
                <link href="{{mapeaPlugin.plugin.style|raw}}" rel="stylesheet" /> 
            {% endfor %} 
        {% endif %}  
        {% endblock %}
{% block javascripts %}
<!-- javascripts Core Mapea -->
        <script type="text/javascript" src="{{mapeaMap.mapeaCore.javascript|raw}}"></script>
        <script type="text/javascript" src="{{mapeaMap.mapeaCore.configuration|raw}}"></script>
            {% if  mapeaMap.mapeaPlugins is not null and  mapeaMap.mapeaPlugins is not empty %}
<!-- javascripts plugins Mapea -->
            {% for mapeaPlugin in mapeaMap.mapeaPlugins %}
                <script type="text/javascript" src="{{mapeaPlugin.plugin.javascript|raw}}"></script>
            {% endfor %}
            {% endif %} 
{% endblock %}
        <style>
            html,body,#map {
                padding: 0;
                margin: 0;
                width: 100%;
                height: 100%;
            }
            .m-layerswitcher-container{
                max-width:40vw;
            }
        </style>
    </head>
    <body>
{% block body %} 
    <div id='map'></div>
{% endblock %}        
{% block body_javascripts %}
    <script type='text/javascript'>
{% if mapeaMap.mapeaLayersWMS is not null and mapeaMap.mapeaLayersWMS is not empty %}
{% for mapeaLayerWMS in mapeaMap.mapeaLayersWMS %}
    let {{mapeaLayerWMS.layerName}} = new M.layer.WMS({
        url: '{{mapeaLayerWMS.layerWMSUrl}}',
        name: '{{mapeaLayerWMS.layerName}}',
        legend: '{{mapeaLayerWMS.layerTitle}}',
    {% if mapeaLayerWMS.baseLayer %}
    transparent: false,
    {% else %}
    transparent: true,
    {% endif %}
    tiled: true
        },{
            params: {
        {% if not mapeaLayerWMS.layerStyle == 'default' %}
        style:'{{mapeaLayerWMS.layerStyle}}',
        {% endif %}
        layers: '{{mapeaLayerWMS.layerName}}'
        }
    });
{% if mapeaLayerWMS.opacity is not null and mapeaLayerWMS.opacity is not empty%}
    {{mapeaLayerWMS.layerName}}.setOpacity({{mapeaLayerWMS.opacity}});
{% endif %}    
{% if mapeaLayerWMS.image is not null and mapeaLayerWMS.image is not empty%}
    {{mapeaLayerWMS.layerName}}.setLegendURL('{{ app.request.getSchemeAndHttpHost()}}{{ asset('uploads/legends/')}}{{mapeaLayerWMS.image.urlPath}}');
{% endif %} 
{% endfor %} 
{% endif %}

    mapajs = M.map({
        container:'map',
{% if mapeaMap.mapeaWMC is not null and mapeaMap.mapeaWMC is not empty %}
            wmcfiles: [{% for mapeaWMC in mapeaMap.mapeaWMC %}'{{ app.request.getSchemeAndHttpHost()}}{{ asset('uploads/wmc/')}}{{mapeaWMC.urlPath}}*{{mapeaWMC.title}}',{% endfor %}],
{% endif %}
{% if mapeaMap.mapeaLayersWMS is not null and mapeaMap.mapeaLayersWMS is not empty %}
        layers: [{% for mapeaLayerWMS in mapeaMap.mapeaLayersWMS %}{{mapeaLayerWMS.layerName}},{% endfor %}]
{% endif %}                
        });
    //maps options 
{% if mapeaMap.zoom is not null and mapeaMap.zoom is not empty %}
    mapajs.setZoom({{mapeaMap.zoom}});
{% endif %}            
{% if mapeaMap.bbox is not null and mapeaMap.bbox is not empty %}
    mapajs.setBbox({{mapeaMap.bbox}});
{% endif %}
{% if mapeaMap.maxExtent is not null and mapeaMap.maxExtent is not empty %}
    mapajs.setMaxExtent ({{mapeaMap.maxExtent}});
{% endif %}
{% if mapeaMap.projection is not null and mapeaMap.projection is not empty %}
    mapajs.setProjection ('{{mapeaMap.projection}}');
{% endif %}  
{% if mapeaMap.center is not null and mapeaMap.center is not empty %}
    mapajs.setCenter({{mapeaMap.center}});
{% endif %}
{% if mapeaMap.label is not null and mapeaMap.label is not empty %}
    mapajs.addLabel('{{mapeaMap.label|replace({"\n": "", "\r": "", "\t": ""})|raw}}'); 
{% endif %}
{% if mapeaMap.resolutions is not null and mapeaMap.resolutions is not empty %}
    mapajs.setResolutions({{mapeaMap.resolutions}}); 
{% endif %}
    
{% for mapeaPlugin in mapeaMap.mapeaPlugins %}
    {% if mapeaPlugin.pluginConfig.configuration == "default" %}  
    //no parametrizable plugins
    {{mapeaPlugin.plugin.code~';'|raw}} 
    {% else %}
    //parametrizable plugins
    {{mapeaPlugin.plugin.code|replace({'()': '(' ~ mapeaPlugin.pluginConfig.configuration ~')'})|raw}};
    {% endif %}
{% endfor %}
    
{% for mapeaControl in mapeaMap.mapeaControls %}
    {% if mapeaControl.controlConfig.configuration == "default" %}  
    //no parametrizable control
    {{mapeaControl.control.code|raw}};
    {% else %}
    //parametrizable control
    {{mapeaControl.control.code|replace({'()': '(' ~ mapeaControl.controlConfig.configuration ~')'})|raw}};
    {% endif %}
{% endfor %}
{% endblock %}
</script>
</body>
</html>